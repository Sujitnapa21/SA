basePath: /api/v1
definitions:
  ent.Bloodtype:
    properties:
      Name:
        description: Name holds the value of the "Name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.BloodtypeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BloodtypeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.BloodtypeEdges:
    properties:
      patient:
        description: Patient holds the value of the patient edge.
        items:
          $ref: '#/definitions/ent.Patient'
        type: array
    type: object
  ent.Employee:
    properties:
      User_id:
        description: UserID holds the value of the "User_id" field.
        type: string
      edges:
        $ref: '#/definitions/ent.EmployeeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the EmployeeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.EmployeeEdges:
    properties:
      patient:
        description: Patient holds the value of the patient edge.
        items:
          $ref: '#/definitions/ent.Patient'
        type: array
    type: object
  ent.Gender:
    properties:
      Name:
        description: Name holds the value of the "Name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.GenderEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the GenderQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.GenderEdges:
    properties:
      patient:
        description: Patient holds the value of the patient edge.
        items:
          $ref: '#/definitions/ent.Patient'
        type: array
    type: object
  ent.NameTitle:
    properties:
      Name:
        description: Name holds the value of the "Name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.NameTitleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the NameTitleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.NameTitleEdges:
    properties:
      patient:
        description: Patient holds the value of the patient edge.
        items:
          $ref: '#/definitions/ent.Patient'
        type: array
    type: object
  ent.Patient:
    properties:
      Address:
        description: Address holds the value of the "Address" field.
        type: string
      Allergic:
        description: Allergic holds the value of the "Allergic" field.
        type: string
      Congenital:
        description: Congenital holds the value of the "Congenital" field.
        type: string
      Idcard:
        description: Idcard holds the value of the "Idcard" field.
        type: string
      Name:
        description: Name holds the value of the "Name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PatientEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PatientQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PatientEdges:
    properties:
      bloodtype:
        $ref: '#/definitions/ent.Bloodtype'
        description: Bloodtype holds the value of the bloodtype edge.
        type: object
      employee:
        $ref: '#/definitions/ent.Employee'
        description: Employee holds the value of the employee edge.
        type: object
      gender:
        $ref: '#/definitions/ent.Gender'
        description: Gender holds the value of the gender edge.
        type: object
      nametitle:
        $ref: '#/definitions/ent.NameTitle'
        description: Nametitle holds the value of the nametitle edge.
        type: object
      status:
        $ref: '#/definitions/ent.Status'
        description: Status holds the value of the status edge.
        type: object
    type: object
  ent.Status:
    properties:
      Name:
        description: Name holds the value of the "Name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.StatusEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the StatusQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.StatusEdges:
    properties:
      patient:
        description: Patient holds the value of the patient edge.
        items:
          $ref: '#/definitions/ent.Patient'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API Patient
  version: "1.0"
paths:
  /Employees:
    post:
      consumes:
      - application/json
      description: Create employee
      operationId: create-employee
      parameters:
      - description: Employee entity
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/ent.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create employee
  /bloodtypes:
    get:
      description: list bloodtype entities
      operationId: list-bloodtype
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Bloodtype'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List bloodtype entities
    post:
      consumes:
      - application/json
      description: Create bloodtype
      operationId: create-bloodtype
      parameters:
      - description: Bloodtype entity
        in: body
        name: bloodtype
        required: true
        schema:
          $ref: '#/definitions/ent.Bloodtype'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bloodtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create bloodtype
  /bloodtypes/{id}:
    get:
      description: get bloodtype by ID
      operationId: get-bloodtype
      parameters:
      - description: Bloodtype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bloodtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a bloodtype entity by ID
  /employees:
    get:
      description: list employee entities
      operationId: list-employee
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Employee'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List employee entities
  /employees/{id}:
    get:
      description: get employee by ID
      operationId: get-employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a employee entity by ID
  /genders:
    get:
      description: list gender entities
      operationId: list-gender
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Gender'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List gender entities
    post:
      consumes:
      - application/json
      description: Create gender
      operationId: create-gender
      parameters:
      - description: Gender entity
        in: body
        name: gender
        required: true
        schema:
          $ref: '#/definitions/ent.Gender'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create gender
  /genders/{id}:
    get:
      description: get gender by ID
      operationId: get-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a gender entity by ID
  /nametitles:
    get:
      description: list nametitle entities
      operationId: list-nametitle
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.NameTitle'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List nametitle entities
    post:
      consumes:
      - application/json
      description: Create nametitle
      operationId: create-nametitle
      parameters:
      - description: NameTitle entity
        in: body
        name: nametitle
        required: true
        schema:
          $ref: '#/definitions/ent.NameTitle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.NameTitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create nametitle
  /nametitles/{id}:
    get:
      description: get nametitle by ID
      operationId: get-nametitle
      parameters:
      - description: NameTitle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.NameTitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a nametitle entity by ID
  /patients:
    get:
      description: list patient entities
      operationId: list-patient
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Patient'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List patient entities
    post:
      consumes:
      - application/json
      description: Create patient
      operationId: create-patient
      parameters:
      - description: Patient entity
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/ent.Patient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create patient
  /statuss:
    get:
      description: list status entities
      operationId: list-status
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Status'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List status entities
    post:
      consumes:
      - application/json
      description: Create status
      operationId: create-status
      parameters:
      - description: Status entity
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/ent.Status'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create status
  /statuss/{id}:
    get:
      description: get status by ID
      operationId: get-status
      parameters:
      - description: Status ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a status entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
