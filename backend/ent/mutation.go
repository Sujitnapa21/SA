// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/Sujitnapa21/app/ent/bloodtype"
	"github.com/Sujitnapa21/app/ent/employee"
	"github.com/Sujitnapa21/app/ent/gender"
	"github.com/Sujitnapa21/app/ent/nametitle"
	"github.com/Sujitnapa21/app/ent/patient"
	"github.com/Sujitnapa21/app/ent/status"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBloodtype = "Bloodtype"
	TypeEmployee  = "Employee"
	TypeGender    = "Gender"
	TypeNameTitle = "NameTitle"
	TypePatient   = "Patient"
	TypeStatus    = "Status"
)

// BloodtypeMutation represents an operation that mutate the Bloodtypes
// nodes in the graph.
type BloodtypeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Name          *string
	clearedFields  map[string]struct{}
	patient        map[int]struct{}
	removedpatient map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Bloodtype, error)
}

var _ ent.Mutation = (*BloodtypeMutation)(nil)

// bloodtypeOption allows to manage the mutation configuration using functional options.
type bloodtypeOption func(*BloodtypeMutation)

// newBloodtypeMutation creates new mutation for $n.Name.
func newBloodtypeMutation(c config, op Op, opts ...bloodtypeOption) *BloodtypeMutation {
	m := &BloodtypeMutation{
		config:        c,
		op:            op,
		typ:           TypeBloodtype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBloodtypeID sets the id field of the mutation.
func withBloodtypeID(id int) bloodtypeOption {
	return func(m *BloodtypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Bloodtype
		)
		m.oldValue = func(ctx context.Context) (*Bloodtype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bloodtype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBloodtype sets the old Bloodtype of the mutation.
func withBloodtype(node *Bloodtype) bloodtypeOption {
	return func(m *BloodtypeMutation) {
		m.oldValue = func(context.Context) (*Bloodtype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BloodtypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BloodtypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BloodtypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the Name field.
func (m *BloodtypeMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *BloodtypeMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Bloodtype.
// If the Bloodtype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BloodtypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *BloodtypeMutation) ResetName() {
	m._Name = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *BloodtypeMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *BloodtypeMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *BloodtypeMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *BloodtypeMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *BloodtypeMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *BloodtypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bloodtype).
func (m *BloodtypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BloodtypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, bloodtype.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BloodtypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bloodtype.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BloodtypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bloodtype.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Bloodtype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BloodtypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bloodtype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Bloodtype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BloodtypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BloodtypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BloodtypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bloodtype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BloodtypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BloodtypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BloodtypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bloodtype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BloodtypeMutation) ResetField(name string) error {
	switch name {
	case bloodtype.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Bloodtype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BloodtypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, bloodtype.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BloodtypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bloodtype.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BloodtypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient != nil {
		edges = append(edges, bloodtype.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BloodtypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bloodtype.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BloodtypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BloodtypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BloodtypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bloodtype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BloodtypeMutation) ResetEdge(name string) error {
	switch name {
	case bloodtype.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Bloodtype edge %s", name)
}

// EmployeeMutation represents an operation that mutate the Employees
// nodes in the graph.
type EmployeeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Email         *string
	_Name          *string
	_User_id       *string
	clearedFields  map[string]struct{}
	patient        map[int]struct{}
	removedpatient map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Employee, error)
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows to manage the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for $n.Name.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the id field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the Email field.
func (m *EmployeeMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *EmployeeMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *EmployeeMutation) ResetEmail() {
	m._Email = nil
}

// SetName sets the Name field.
func (m *EmployeeMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *EmployeeMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *EmployeeMutation) ResetName() {
	m._Name = nil
}

// SetUserID sets the User_id field.
func (m *EmployeeMutation) SetUserID(s string) {
	m._User_id = &s
}

// UserID returns the User_id value in the mutation.
func (m *EmployeeMutation) UserID() (r string, exists bool) {
	v := m._User_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old User_id value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID reset all changes of the "User_id" field.
func (m *EmployeeMutation) ResetUserID() {
	m._User_id = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *EmployeeMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *EmployeeMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *EmployeeMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *EmployeeMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *EmployeeMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Email != nil {
		fields = append(fields, employee.FieldEmail)
	}
	if m._Name != nil {
		fields = append(fields, employee.FieldName)
	}
	if m._User_id != nil {
		fields = append(fields, employee.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldEmail:
		return m.Email()
	case employee.FieldName:
		return m.Name()
	case employee.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldEmail:
		return m.OldEmail(ctx)
	case employee.FieldName:
		return m.OldName(ctx)
	case employee.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case employee.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case employee.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldEmail:
		m.ResetEmail()
		return nil
	case employee.FieldName:
		m.ResetName()
		return nil
	case employee.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, employee.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient != nil {
		edges = append(edges, employee.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Name          *string
	clearedFields  map[string]struct{}
	patient        map[int]struct{}
	removedpatient map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the Name field.
func (m *GenderMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *GenderMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *GenderMutation) ResetName() {
	m._Name = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *GenderMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *GenderMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *GenderMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *GenderMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *GenderMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, gender.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, gender.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient != nil {
		edges = append(edges, gender.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// NameTitleMutation represents an operation that mutate the NameTitles
// nodes in the graph.
type NameTitleMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Name          *string
	clearedFields  map[string]struct{}
	patient        map[int]struct{}
	removedpatient map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*NameTitle, error)
}

var _ ent.Mutation = (*NameTitleMutation)(nil)

// nametitleOption allows to manage the mutation configuration using functional options.
type nametitleOption func(*NameTitleMutation)

// newNameTitleMutation creates new mutation for $n.Name.
func newNameTitleMutation(c config, op Op, opts ...nametitleOption) *NameTitleMutation {
	m := &NameTitleMutation{
		config:        c,
		op:            op,
		typ:           TypeNameTitle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNameTitleID sets the id field of the mutation.
func withNameTitleID(id int) nametitleOption {
	return func(m *NameTitleMutation) {
		var (
			err   error
			once  sync.Once
			value *NameTitle
		)
		m.oldValue = func(ctx context.Context) (*NameTitle, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NameTitle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNameTitle sets the old NameTitle of the mutation.
func withNameTitle(node *NameTitle) nametitleOption {
	return func(m *NameTitleMutation) {
		m.oldValue = func(context.Context) (*NameTitle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NameTitleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NameTitleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *NameTitleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the Name field.
func (m *NameTitleMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *NameTitleMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the NameTitle.
// If the NameTitle object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NameTitleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *NameTitleMutation) ResetName() {
	m._Name = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *NameTitleMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *NameTitleMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *NameTitleMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *NameTitleMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *NameTitleMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *NameTitleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NameTitle).
func (m *NameTitleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *NameTitleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, nametitle.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *NameTitleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nametitle.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *NameTitleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nametitle.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown NameTitle field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NameTitleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nametitle.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown NameTitle field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *NameTitleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *NameTitleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NameTitleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NameTitle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *NameTitleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *NameTitleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *NameTitleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NameTitle nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *NameTitleMutation) ResetField(name string) error {
	switch name {
	case nametitle.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown NameTitle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *NameTitleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, nametitle.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *NameTitleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nametitle.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *NameTitleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient != nil {
		edges = append(edges, nametitle.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *NameTitleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nametitle.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *NameTitleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *NameTitleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *NameTitleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown NameTitle unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *NameTitleMutation) ResetEdge(name string) error {
	switch name {
	case nametitle.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown NameTitle edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Idcard          *string
	_Name            *string
	_Address         *string
	_Congenital      *string
	_Allergic        *string
	clearedFields    map[string]struct{}
	employee         *int
	clearedemployee  bool
	status           *int
	clearedstatus    bool
	bloodtype        *int
	clearedbloodtype bool
	gender           *int
	clearedgender    bool
	nametitle        *int
	clearednametitle bool
	done             bool
	oldValue         func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIdcard sets the Idcard field.
func (m *PatientMutation) SetIdcard(s string) {
	m._Idcard = &s
}

// Idcard returns the Idcard value in the mutation.
func (m *PatientMutation) Idcard() (r string, exists bool) {
	v := m._Idcard
	if v == nil {
		return
	}
	return *v, true
}

// OldIdcard returns the old Idcard value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldIdcard(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdcard is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdcard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdcard: %w", err)
	}
	return oldValue.Idcard, nil
}

// ResetIdcard reset all changes of the "Idcard" field.
func (m *PatientMutation) ResetIdcard() {
	m._Idcard = nil
}

// SetName sets the Name field.
func (m *PatientMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *PatientMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *PatientMutation) ResetName() {
	m._Name = nil
}

// SetAddress sets the Address field.
func (m *PatientMutation) SetAddress(s string) {
	m._Address = &s
}

// Address returns the Address value in the mutation.
func (m *PatientMutation) Address() (r string, exists bool) {
	v := m._Address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old Address value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress reset all changes of the "Address" field.
func (m *PatientMutation) ResetAddress() {
	m._Address = nil
}

// SetCongenital sets the Congenital field.
func (m *PatientMutation) SetCongenital(s string) {
	m._Congenital = &s
}

// Congenital returns the Congenital value in the mutation.
func (m *PatientMutation) Congenital() (r string, exists bool) {
	v := m._Congenital
	if v == nil {
		return
	}
	return *v, true
}

// OldCongenital returns the old Congenital value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldCongenital(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCongenital is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCongenital requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCongenital: %w", err)
	}
	return oldValue.Congenital, nil
}

// ResetCongenital reset all changes of the "Congenital" field.
func (m *PatientMutation) ResetCongenital() {
	m._Congenital = nil
}

// SetAllergic sets the Allergic field.
func (m *PatientMutation) SetAllergic(s string) {
	m._Allergic = &s
}

// Allergic returns the Allergic value in the mutation.
func (m *PatientMutation) Allergic() (r string, exists bool) {
	v := m._Allergic
	if v == nil {
		return
	}
	return *v, true
}

// OldAllergic returns the old Allergic value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAllergic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAllergic is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAllergic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllergic: %w", err)
	}
	return oldValue.Allergic, nil
}

// ResetAllergic reset all changes of the "Allergic" field.
func (m *PatientMutation) ResetAllergic() {
	m._Allergic = nil
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *PatientMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *PatientMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *PatientMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *PatientMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *PatientMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// SetStatusID sets the status edge to Status by id.
func (m *PatientMutation) SetStatusID(id int) {
	m.status = &id
}

// ClearStatus clears the status edge to Status.
func (m *PatientMutation) ClearStatus() {
	m.clearedstatus = true
}

// StatusCleared returns if the edge status was cleared.
func (m *PatientMutation) StatusCleared() bool {
	return m.clearedstatus
}

// StatusID returns the status id in the mutation.
func (m *PatientMutation) StatusID() (id int, exists bool) {
	if m.status != nil {
		return *m.status, true
	}
	return
}

// StatusIDs returns the status ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// StatusID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) StatusIDs() (ids []int) {
	if id := m.status; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatus reset all changes of the "status" edge.
func (m *PatientMutation) ResetStatus() {
	m.status = nil
	m.clearedstatus = false
}

// SetBloodtypeID sets the bloodtype edge to Bloodtype by id.
func (m *PatientMutation) SetBloodtypeID(id int) {
	m.bloodtype = &id
}

// ClearBloodtype clears the bloodtype edge to Bloodtype.
func (m *PatientMutation) ClearBloodtype() {
	m.clearedbloodtype = true
}

// BloodtypeCleared returns if the edge bloodtype was cleared.
func (m *PatientMutation) BloodtypeCleared() bool {
	return m.clearedbloodtype
}

// BloodtypeID returns the bloodtype id in the mutation.
func (m *PatientMutation) BloodtypeID() (id int, exists bool) {
	if m.bloodtype != nil {
		return *m.bloodtype, true
	}
	return
}

// BloodtypeIDs returns the bloodtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BloodtypeID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) BloodtypeIDs() (ids []int) {
	if id := m.bloodtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBloodtype reset all changes of the "bloodtype" edge.
func (m *PatientMutation) ResetBloodtype() {
	m.bloodtype = nil
	m.clearedbloodtype = false
}

// SetGenderID sets the gender edge to Gender by id.
func (m *PatientMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *PatientMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *PatientMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *PatientMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *PatientMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// SetNametitleID sets the nametitle edge to NameTitle by id.
func (m *PatientMutation) SetNametitleID(id int) {
	m.nametitle = &id
}

// ClearNametitle clears the nametitle edge to NameTitle.
func (m *PatientMutation) ClearNametitle() {
	m.clearednametitle = true
}

// NametitleCleared returns if the edge nametitle was cleared.
func (m *PatientMutation) NametitleCleared() bool {
	return m.clearednametitle
}

// NametitleID returns the nametitle id in the mutation.
func (m *PatientMutation) NametitleID() (id int, exists bool) {
	if m.nametitle != nil {
		return *m.nametitle, true
	}
	return
}

// NametitleIDs returns the nametitle ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NametitleID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) NametitleIDs() (ids []int) {
	if id := m.nametitle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNametitle reset all changes of the "nametitle" edge.
func (m *PatientMutation) ResetNametitle() {
	m.nametitle = nil
	m.clearednametitle = false
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._Idcard != nil {
		fields = append(fields, patient.FieldIdcard)
	}
	if m._Name != nil {
		fields = append(fields, patient.FieldName)
	}
	if m._Address != nil {
		fields = append(fields, patient.FieldAddress)
	}
	if m._Congenital != nil {
		fields = append(fields, patient.FieldCongenital)
	}
	if m._Allergic != nil {
		fields = append(fields, patient.FieldAllergic)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldIdcard:
		return m.Idcard()
	case patient.FieldName:
		return m.Name()
	case patient.FieldAddress:
		return m.Address()
	case patient.FieldCongenital:
		return m.Congenital()
	case patient.FieldAllergic:
		return m.Allergic()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldIdcard:
		return m.OldIdcard(ctx)
	case patient.FieldName:
		return m.OldName(ctx)
	case patient.FieldAddress:
		return m.OldAddress(ctx)
	case patient.FieldCongenital:
		return m.OldCongenital(ctx)
	case patient.FieldAllergic:
		return m.OldAllergic(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldIdcard:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdcard(v)
		return nil
	case patient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case patient.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case patient.FieldCongenital:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCongenital(v)
		return nil
	case patient.FieldAllergic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllergic(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldIdcard:
		m.ResetIdcard()
		return nil
	case patient.FieldName:
		m.ResetName()
		return nil
	case patient.FieldAddress:
		m.ResetAddress()
		return nil
	case patient.FieldCongenital:
		m.ResetCongenital()
		return nil
	case patient.FieldAllergic:
		m.ResetAllergic()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.employee != nil {
		edges = append(edges, patient.EdgeEmployee)
	}
	if m.status != nil {
		edges = append(edges, patient.EdgeStatus)
	}
	if m.bloodtype != nil {
		edges = append(edges, patient.EdgeBloodtype)
	}
	if m.gender != nil {
		edges = append(edges, patient.EdgeGender)
	}
	if m.nametitle != nil {
		edges = append(edges, patient.EdgeNametitle)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeStatus:
		if id := m.status; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeBloodtype:
		if id := m.bloodtype; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeNametitle:
		if id := m.nametitle; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedemployee {
		edges = append(edges, patient.EdgeEmployee)
	}
	if m.clearedstatus {
		edges = append(edges, patient.EdgeStatus)
	}
	if m.clearedbloodtype {
		edges = append(edges, patient.EdgeBloodtype)
	}
	if m.clearedgender {
		edges = append(edges, patient.EdgeGender)
	}
	if m.clearednametitle {
		edges = append(edges, patient.EdgeNametitle)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeEmployee:
		return m.clearedemployee
	case patient.EdgeStatus:
		return m.clearedstatus
	case patient.EdgeBloodtype:
		return m.clearedbloodtype
	case patient.EdgeGender:
		return m.clearedgender
	case patient.EdgeNametitle:
		return m.clearednametitle
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	case patient.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case patient.EdgeStatus:
		m.ClearStatus()
		return nil
	case patient.EdgeBloodtype:
		m.ClearBloodtype()
		return nil
	case patient.EdgeGender:
		m.ClearGender()
		return nil
	case patient.EdgeNametitle:
		m.ClearNametitle()
		return nil
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case patient.EdgeStatus:
		m.ResetStatus()
		return nil
	case patient.EdgeBloodtype:
		m.ResetBloodtype()
		return nil
	case patient.EdgeGender:
		m.ResetGender()
		return nil
	case patient.EdgeNametitle:
		m.ResetNametitle()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// StatusMutation represents an operation that mutate the StatusSlice
// nodes in the graph.
type StatusMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Name          *string
	clearedFields  map[string]struct{}
	patient        map[int]struct{}
	removedpatient map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Status, error)
}

var _ ent.Mutation = (*StatusMutation)(nil)

// statusOption allows to manage the mutation configuration using functional options.
type statusOption func(*StatusMutation)

// newStatusMutation creates new mutation for $n.Name.
func newStatusMutation(c config, op Op, opts ...statusOption) *StatusMutation {
	m := &StatusMutation{
		config:        c,
		op:            op,
		typ:           TypeStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatusID sets the id field of the mutation.
func withStatusID(id int) statusOption {
	return func(m *StatusMutation) {
		var (
			err   error
			once  sync.Once
			value *Status
		)
		m.oldValue = func(ctx context.Context) (*Status, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Status.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatus sets the old Status of the mutation.
func withStatus(node *Status) statusOption {
	return func(m *StatusMutation) {
		m.oldValue = func(context.Context) (*Status, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the Name field.
func (m *StatusMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *StatusMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Status.
// If the Status object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StatusMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *StatusMutation) ResetName() {
	m._Name = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *StatusMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *StatusMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *StatusMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *StatusMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *StatusMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *StatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Status).
func (m *StatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, status.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case status.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case status.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Status field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case status.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Status field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Status numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Status nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StatusMutation) ResetField(name string) error {
	switch name {
	case status.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Status field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, status.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case status.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient != nil {
		edges = append(edges, status.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case status.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Status unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StatusMutation) ResetEdge(name string) error {
	switch name {
	case status.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Status edge %s", name)
}
