// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebookincubator/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent/schema/field"
)

var (
	// BloodtypesColumns holds the columns for the "bloodtypes" table.
	BloodtypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// BloodtypesTable holds the schema information for the "bloodtypes" table.
	BloodtypesTable = &schema.Table{
		Name:        "bloodtypes",
		Columns:     BloodtypesColumns,
		PrimaryKey:  []*schema.Column{BloodtypesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// EmployeesColumns holds the columns for the "employees" table.
	EmployeesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// EmployeesTable holds the schema information for the "employees" table.
	EmployeesTable = &schema.Table{
		Name:        "employees",
		Columns:     EmployeesColumns,
		PrimaryKey:  []*schema.Column{EmployeesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// GendersColumns holds the columns for the "genders" table.
	GendersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// GendersTable holds the schema information for the "genders" table.
	GendersTable = &schema.Table{
		Name:        "genders",
		Columns:     GendersColumns,
		PrimaryKey:  []*schema.Column{GendersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// NameTitlesColumns holds the columns for the "name_titles" table.
	NameTitlesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// NameTitlesTable holds the schema information for the "name_titles" table.
	NameTitlesTable = &schema.Table{
		Name:        "name_titles",
		Columns:     NameTitlesColumns,
		PrimaryKey:  []*schema.Column{NameTitlesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PatientsColumns holds the columns for the "patients" table.
	PatientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "idcard", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
		{Name: "congenital", Type: field.TypeString},
		{Name: "allergic", Type: field.TypeString},
		{Name: "bloodtype_patient", Type: field.TypeInt, Nullable: true},
		{Name: "employee_patient", Type: field.TypeInt, Nullable: true},
		{Name: "gender_patient", Type: field.TypeInt, Nullable: true},
		{Name: "name_title_patient", Type: field.TypeInt, Nullable: true},
		{Name: "status_patient", Type: field.TypeInt, Nullable: true},
	}
	// PatientsTable holds the schema information for the "patients" table.
	PatientsTable = &schema.Table{
		Name:       "patients",
		Columns:    PatientsColumns,
		PrimaryKey: []*schema.Column{PatientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "patients_bloodtypes_patient",
				Columns: []*schema.Column{PatientsColumns[6]},

				RefColumns: []*schema.Column{BloodtypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "patients_employees_patient",
				Columns: []*schema.Column{PatientsColumns[7]},

				RefColumns: []*schema.Column{EmployeesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "patients_genders_patient",
				Columns: []*schema.Column{PatientsColumns[8]},

				RefColumns: []*schema.Column{GendersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "patients_name_titles_patient",
				Columns: []*schema.Column{PatientsColumns[9]},

				RefColumns: []*schema.Column{NameTitlesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "patients_status_patient",
				Columns: []*schema.Column{PatientsColumns[10]},

				RefColumns: []*schema.Column{StatusColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StatusColumns holds the columns for the "status" table.
	StatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// StatusTable holds the schema information for the "status" table.
	StatusTable = &schema.Table{
		Name:        "status",
		Columns:     StatusColumns,
		PrimaryKey:  []*schema.Column{StatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BloodtypesTable,
		EmployeesTable,
		GendersTable,
		NameTitlesTable,
		PatientsTable,
		StatusTable,
	}
)

func init() {
	PatientsTable.ForeignKeys[0].RefTable = BloodtypesTable
	PatientsTable.ForeignKeys[1].RefTable = EmployeesTable
	PatientsTable.ForeignKeys[2].RefTable = GendersTable
	PatientsTable.ForeignKeys[3].RefTable = NameTitlesTable
	PatientsTable.ForeignKeys[4].RefTable = StatusTable
}
