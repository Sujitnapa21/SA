// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Sujitnapa21/app/ent/bloodtype"
	"github.com/Sujitnapa21/app/ent/employee"
	"github.com/Sujitnapa21/app/ent/gender"
	"github.com/Sujitnapa21/app/ent/nametitle"
	"github.com/Sujitnapa21/app/ent/patient"
	"github.com/Sujitnapa21/app/ent/status"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Idcard holds the value of the "Idcard" field.
	Idcard string `json:"Idcard,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Address holds the value of the "Address" field.
	Address string `json:"Address,omitempty"`
	// Congenital holds the value of the "Congenital" field.
	Congenital string `json:"Congenital,omitempty"`
	// Allergic holds the value of the "Allergic" field.
	Allergic string `json:"Allergic,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges              PatientEdges `json:"edges"`
	bloodtype_patient  *int
	employee_patient   *int
	gender_patient     *int
	name_title_patient *int
	status_patient     *int
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Status holds the value of the status edge.
	Status *Status
	// Bloodtype holds the value of the bloodtype edge.
	Bloodtype *Bloodtype
	// Gender holds the value of the gender edge.
	Gender *Gender
	// Nametitle holds the value of the nametitle edge.
	Nametitle *NameTitle
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) StatusOrErr() (*Status, error) {
	if e.loadedTypes[1] {
		if e.Status == nil {
			// The edge status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: status.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "status"}
}

// BloodtypeOrErr returns the Bloodtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) BloodtypeOrErr() (*Bloodtype, error) {
	if e.loadedTypes[2] {
		if e.Bloodtype == nil {
			// The edge bloodtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: bloodtype.Label}
		}
		return e.Bloodtype, nil
	}
	return nil, &NotLoadedError{edge: "bloodtype"}
}

// GenderOrErr returns the Gender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) GenderOrErr() (*Gender, error) {
	if e.loadedTypes[3] {
		if e.Gender == nil {
			// The edge gender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Gender, nil
	}
	return nil, &NotLoadedError{edge: "gender"}
}

// NametitleOrErr returns the Nametitle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) NametitleOrErr() (*NameTitle, error) {
	if e.loadedTypes[4] {
		if e.Nametitle == nil {
			// The edge nametitle was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nametitle.Label}
		}
		return e.Nametitle, nil
	}
	return nil, &NotLoadedError{edge: "nametitle"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Idcard
		&sql.NullString{}, // Name
		&sql.NullString{}, // Address
		&sql.NullString{}, // Congenital
		&sql.NullString{}, // Allergic
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Patient) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // bloodtype_patient
		&sql.NullInt64{}, // employee_patient
		&sql.NullInt64{}, // gender_patient
		&sql.NullInt64{}, // name_title_patient
		&sql.NullInt64{}, // status_patient
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(values ...interface{}) error {
	if m, n := len(values), len(patient.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Idcard", values[0])
	} else if value.Valid {
		pa.Idcard = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[1])
	} else if value.Valid {
		pa.Name = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Address", values[2])
	} else if value.Valid {
		pa.Address = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Congenital", values[3])
	} else if value.Valid {
		pa.Congenital = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Allergic", values[4])
	} else if value.Valid {
		pa.Allergic = value.String
	}
	values = values[5:]
	if len(values) == len(patient.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field bloodtype_patient", value)
		} else if value.Valid {
			pa.bloodtype_patient = new(int)
			*pa.bloodtype_patient = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_patient", value)
		} else if value.Valid {
			pa.employee_patient = new(int)
			*pa.employee_patient = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field gender_patient", value)
		} else if value.Valid {
			pa.gender_patient = new(int)
			*pa.gender_patient = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field name_title_patient", value)
		} else if value.Valid {
			pa.name_title_patient = new(int)
			*pa.name_title_patient = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field status_patient", value)
		} else if value.Valid {
			pa.status_patient = new(int)
			*pa.status_patient = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployee queries the employee edge of the Patient.
func (pa *Patient) QueryEmployee() *EmployeeQuery {
	return (&PatientClient{config: pa.config}).QueryEmployee(pa)
}

// QueryStatus queries the status edge of the Patient.
func (pa *Patient) QueryStatus() *StatusQuery {
	return (&PatientClient{config: pa.config}).QueryStatus(pa)
}

// QueryBloodtype queries the bloodtype edge of the Patient.
func (pa *Patient) QueryBloodtype() *BloodtypeQuery {
	return (&PatientClient{config: pa.config}).QueryBloodtype(pa)
}

// QueryGender queries the gender edge of the Patient.
func (pa *Patient) QueryGender() *GenderQuery {
	return (&PatientClient{config: pa.config}).QueryGender(pa)
}

// QueryNametitle queries the nametitle edge of the Patient.
func (pa *Patient) QueryNametitle() *NameTitleQuery {
	return (&PatientClient{config: pa.config}).QueryNametitle(pa)
}

// Update returns a builder for updating this Patient.
// Note that, you need to call Patient.Unwrap() before calling this method, if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return (&PatientClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", Idcard=")
	builder.WriteString(pa.Idcard)
	builder.WriteString(", Name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", Address=")
	builder.WriteString(pa.Address)
	builder.WriteString(", Congenital=")
	builder.WriteString(pa.Congenital)
	builder.WriteString(", Allergic=")
	builder.WriteString(pa.Allergic)
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient

func (pa Patients) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
