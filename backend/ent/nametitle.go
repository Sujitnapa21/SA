// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Sujitnapa21/app/ent/nametitle"
	"github.com/facebookincubator/ent/dialect/sql"
)

// NameTitle is the model entity for the NameTitle schema.
type NameTitle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NameTitleQuery when eager-loading is set.
	Edges NameTitleEdges `json:"edges"`
}

// NameTitleEdges holds the relations/edges for other nodes in the graph.
type NameTitleEdges struct {
	// Patient holds the value of the patient edge.
	Patient []*Patient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading.
func (e NameTitleEdges) PatientOrErr() ([]*Patient, error) {
	if e.loadedTypes[0] {
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NameTitle) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NameTitle fields.
func (nt *NameTitle) assignValues(values ...interface{}) error {
	if m, n := len(values), len(nametitle.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	nt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		nt.Name = value.String
	}
	return nil
}

// QueryPatient queries the patient edge of the NameTitle.
func (nt *NameTitle) QueryPatient() *PatientQuery {
	return (&NameTitleClient{config: nt.config}).QueryPatient(nt)
}

// Update returns a builder for updating this NameTitle.
// Note that, you need to call NameTitle.Unwrap() before calling this method, if this NameTitle
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NameTitle) Update() *NameTitleUpdateOne {
	return (&NameTitleClient{config: nt.config}).UpdateOne(nt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (nt *NameTitle) Unwrap() *NameTitle {
	tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NameTitle is not a transactional entity")
	}
	nt.config.driver = tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NameTitle) String() string {
	var builder strings.Builder
	builder.WriteString("NameTitle(")
	builder.WriteString(fmt.Sprintf("id=%v", nt.ID))
	builder.WriteString(", Name=")
	builder.WriteString(nt.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NameTitles is a parsable slice of NameTitle.
type NameTitles []*NameTitle

func (nt NameTitles) config(cfg config) {
	for _i := range nt {
		nt[_i].config = cfg
	}
}
