// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Sujitnapa21/app/ent/nametitle"
	"github.com/Sujitnapa21/app/ent/patient"
	"github.com/Sujitnapa21/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// NameTitleUpdate is the builder for updating NameTitle entities.
type NameTitleUpdate struct {
	config
	hooks      []Hook
	mutation   *NameTitleMutation
	predicates []predicate.NameTitle
}

// Where adds a new predicate for the builder.
func (ntu *NameTitleUpdate) Where(ps ...predicate.NameTitle) *NameTitleUpdate {
	ntu.predicates = append(ntu.predicates, ps...)
	return ntu
}

// SetName sets the Name field.
func (ntu *NameTitleUpdate) SetName(s string) *NameTitleUpdate {
	ntu.mutation.SetName(s)
	return ntu
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (ntu *NameTitleUpdate) AddPatientIDs(ids ...int) *NameTitleUpdate {
	ntu.mutation.AddPatientIDs(ids...)
	return ntu
}

// AddPatient adds the patient edges to Patient.
func (ntu *NameTitleUpdate) AddPatient(p ...*Patient) *NameTitleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ntu.AddPatientIDs(ids...)
}

// Mutation returns the NameTitleMutation object of the builder.
func (ntu *NameTitleUpdate) Mutation() *NameTitleMutation {
	return ntu.mutation
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (ntu *NameTitleUpdate) RemovePatientIDs(ids ...int) *NameTitleUpdate {
	ntu.mutation.RemovePatientIDs(ids...)
	return ntu
}

// RemovePatient removes patient edges to Patient.
func (ntu *NameTitleUpdate) RemovePatient(p ...*Patient) *NameTitleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ntu.RemovePatientIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ntu *NameTitleUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ntu.hooks) == 0 {
		affected, err = ntu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NameTitleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ntu.mutation = mutation
			affected, err = ntu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ntu.hooks) - 1; i >= 0; i-- {
			mut = ntu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntu *NameTitleUpdate) SaveX(ctx context.Context) int {
	affected, err := ntu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntu *NameTitleUpdate) Exec(ctx context.Context) error {
	_, err := ntu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntu *NameTitleUpdate) ExecX(ctx context.Context) {
	if err := ntu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ntu *NameTitleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nametitle.Table,
			Columns: nametitle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nametitle.FieldID,
			},
		},
	}
	if ps := ntu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nametitle.FieldName,
		})
	}
	if nodes := ntu.mutation.RemovedPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nametitle.PatientTable,
			Columns: []string{nametitle.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nametitle.PatientTable,
			Columns: []string{nametitle.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nametitle.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NameTitleUpdateOne is the builder for updating a single NameTitle entity.
type NameTitleUpdateOne struct {
	config
	hooks    []Hook
	mutation *NameTitleMutation
}

// SetName sets the Name field.
func (ntuo *NameTitleUpdateOne) SetName(s string) *NameTitleUpdateOne {
	ntuo.mutation.SetName(s)
	return ntuo
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (ntuo *NameTitleUpdateOne) AddPatientIDs(ids ...int) *NameTitleUpdateOne {
	ntuo.mutation.AddPatientIDs(ids...)
	return ntuo
}

// AddPatient adds the patient edges to Patient.
func (ntuo *NameTitleUpdateOne) AddPatient(p ...*Patient) *NameTitleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ntuo.AddPatientIDs(ids...)
}

// Mutation returns the NameTitleMutation object of the builder.
func (ntuo *NameTitleUpdateOne) Mutation() *NameTitleMutation {
	return ntuo.mutation
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (ntuo *NameTitleUpdateOne) RemovePatientIDs(ids ...int) *NameTitleUpdateOne {
	ntuo.mutation.RemovePatientIDs(ids...)
	return ntuo
}

// RemovePatient removes patient edges to Patient.
func (ntuo *NameTitleUpdateOne) RemovePatient(p ...*Patient) *NameTitleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ntuo.RemovePatientIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ntuo *NameTitleUpdateOne) Save(ctx context.Context) (*NameTitle, error) {

	var (
		err  error
		node *NameTitle
	)
	if len(ntuo.hooks) == 0 {
		node, err = ntuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NameTitleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ntuo.mutation = mutation
			node, err = ntuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntuo.hooks) - 1; i >= 0; i-- {
			mut = ntuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntuo *NameTitleUpdateOne) SaveX(ctx context.Context) *NameTitle {
	nt, err := ntuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return nt
}

// Exec executes the query on the entity.
func (ntuo *NameTitleUpdateOne) Exec(ctx context.Context) error {
	_, err := ntuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntuo *NameTitleUpdateOne) ExecX(ctx context.Context) {
	if err := ntuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ntuo *NameTitleUpdateOne) sqlSave(ctx context.Context) (nt *NameTitle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nametitle.Table,
			Columns: nametitle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nametitle.FieldID,
			},
		},
	}
	id, ok := ntuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NameTitle.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ntuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nametitle.FieldName,
		})
	}
	if nodes := ntuo.mutation.RemovedPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nametitle.PatientTable,
			Columns: []string{nametitle.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nametitle.PatientTable,
			Columns: []string{nametitle.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	nt = &NameTitle{config: ntuo.config}
	_spec.Assign = nt.assignValues
	_spec.ScanValues = nt.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ntuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nametitle.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return nt, nil
}
